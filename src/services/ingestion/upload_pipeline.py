import streamlit as st


# import utils file
from controllers.upload_controller import *
from utils.session_handler import *
from utils.output_utils import *
from services.db import *

from services.llm_pipeline.combined_pipeline import handle_core_processing
from frontend.components.page_header.page_header import *
from frontend.checkpoint_page import handle_exit


@st.dialog("⚠️ AI Usage Disclaimer")
def show_ai_consent_dialog():
    """Display AI consent dialog before processing"""
    st.warning("**Use AI with Discretion**")
    st.markdown(
        """
    **Important Notice:** This application uses AI to process your data.

    ⚠️ **Please be aware that:**
    - **AI can be wrong** - Results generated by AI may contain inaccuracies
    - **Human review required** - Always verify and review AI-generated outputs
    - **Not 100% reliable** - Use AI results as guidance, not absolute truth
    - **Your data will be processed** by blackboxed Artificial Intelligence algorithms

    **By proceeding, you acknowledge that you understand these limitations and will use the results with appropriate discretion.**
    """
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("❌ Cancel", use_container_width=True):
            st.session_state.ai_consent_given = False
            st.session_state.show_ai_dialog = False
            st.rerun()
    with col2:
        if st.button(
            "✅ I Understand, Proceed", use_container_width=True, type="primary"
        ):
            st.session_state.ai_consent_given = True
            st.session_state.show_ai_dialog = False
            st.session_state.start_processing = True
            st.rerun()


def process_uploaded_files(
    sfw_df: pd.DataFrame,
    sfw_filename: str,
    sector_df: pd.DataFrame,
    sector_filename: str,
):
    """Render the process button, upload to S3, run core processing, and update state."""
    selected_sector_alias = st.session_state.selected_process_alias
    selected_sector = st.session_state.selected_process
    st.subheader(f"3. Start Processing for {selected_sector_alias} sector")

    # Initialize dialog state if not exists
    if "show_ai_dialog" not in st.session_state:
        st.session_state.show_ai_dialog = False
    if "start_processing" not in st.session_state:
        st.session_state.start_processing = False

    disabled = st.session_state.processing  # this is initialised to False

    # Show dialog if needed
    if st.session_state.show_ai_dialog:
        show_ai_consent_dialog()

    # Handle processing trigger
    process_clicked = st.button("Process Data", disabled=disabled)

    if process_clicked:
        # Show AI consent dialog first if consent not given
        if not st.session_state.ai_consent_given:
            st.session_state.show_ai_dialog = True
            st.rerun()
            return

    # Process data if consent given and processing triggered
    if st.session_state.start_processing and st.session_state.ai_consent_given:
        # Reset states
        st.session_state.start_processing = False
        st.session_state.ai_consent_given = False  # Reset consent for next time
        st.session_state.processing = True  # Lock processing button

        with st.spinner("Processing..."):
            caption = st.empty()

            # 1) Wipe DB before uploading new data
            wipe_db(caption)

            # 2) upload inputs
            async_write_input_to_s3(
                caption, sfw_filename, sfw_df, sector_filename, sector_df
            )

            # 3) core processing (may exit early)
            results = handle_core_processing(
                caption, selected_sector, selected_sector_alias
            )

            # 4) handle early exit
            if not results:
                st.session_state.processing = False  # Unlock the button again
                handle_exit()
                return

            # 5) upload outputs
            async_write_output_to_s3(caption, results)

            # 6) update state and rerun
            st.session_state.results = results
            st.session_state.csv_yes = True
            st.session_state.app_stage = "results_ready"
            st.session_state.processing = False  # Unlock the button again

        st.rerun()
