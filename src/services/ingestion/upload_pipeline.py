import streamlit as st
import logging

# import utils file
from controllers.upload_controller import *
from utils.session_handler import *
from utils.output_utils import *
from services.db import *

from services.llm_pipeline.combined_pipeline import handle_core_processing
from frontend.components.page_header.page_header import *
from frontend.checkpoint_page import handle_exit

# Configure logging for upload pipeline
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


@st.dialog("⚠️ AI Usage Disclaimer")
def show_ai_consent_dialog():
    """Display AI consent dialog before processing"""
    st.warning("**Use AI with Discretion**")
    st.markdown(
        """
    **Important Notice:** This application uses AI to process your data.

    ⚠️ **Please be aware that:**
    - **AI can be wrong** - Results generated by AI may contain inaccuracies
    - **Human review required** - Always verify and review AI-generated outputs
    - **Not 100% reliable** - Use AI results as guidance, not absolute truth
    - **Your data will be processed** by blackboxed Artificial Intelligence algorithms

    **By proceeding, you acknowledge that you understand these limitations and will use the results with appropriate discretion.**
    """
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("❌ Cancel", use_container_width=True):
            st.session_state.ai_consent_given = False
            st.session_state.show_ai_dialog = False
            st.rerun()
    with col2:
        if st.button(
            "✅ I Understand, Proceed", use_container_width=True, type="primary"
        ):
            st.session_state.ai_consent_given = True
            st.session_state.show_ai_dialog = False
            st.session_state.start_processing = True
            st.rerun()


def process_uploaded_files(
    sfw_df: pd.DataFrame,
    sfw_filename: str,
    sector_df: pd.DataFrame,
    sector_filename: str,
):
    """Render the process button, upload to S3, run core processing, and update state."""
    selected_sector_alias = st.session_state.selected_process_alias
    selected_sector = st.session_state.selected_process

    # Log user action and file details
    logger.info("=" * 80)
    logger.info("🚀 USER INITIATED UPLOAD PROCESS")
    logger.info(f"📁 Selected Sector: {selected_sector} ({selected_sector_alias})")
    logger.info(f"📄 SFW File: {sfw_filename} | Shape: {sfw_df.shape}")
    logger.info(f"📄 Sector File: {sector_filename} | Shape: {sector_df.shape}")
    logger.info(
        f"👤 Session State Processing: {st.session_state.get('processing', 'Unknown')}"
    )
    logger.info("=" * 80)

    st.subheader(f"3. Start Processing for {selected_sector_alias} sector")

    # Initialize dialog state if not exists
    if "show_ai_dialog" not in st.session_state:
        st.session_state.show_ai_dialog = False
    if "start_processing" not in st.session_state:
        st.session_state.start_processing = False

    disabled = st.session_state.processing  # this is initialised to False

    # Show dialog if needed
    if st.session_state.show_ai_dialog:
        show_ai_consent_dialog()

    # Handle processing trigger
    process_clicked = st.button("Process Data", disabled=disabled)

    if process_clicked:
        logger.info("🔘 PROCESS DATA BUTTON CLICKED")
        logger.info(
            f"📊 Button State - Disabled: {disabled}, Processing: {st.session_state.processing}"
        )

        # Show AI consent dialog first if consent not given
        if not st.session_state.get("ai_consent_given", False):
            st.session_state.show_ai_dialog = True
            st.rerun()
            return

    # Process data if consent given and processing triggered
    if st.session_state.get("start_processing", False) and st.session_state.get(
        "ai_consent_given", False
    ):
        # Reset states
        st.session_state.start_processing = False
        st.session_state.ai_consent_given = False  # Reset consent for next time
        st.session_state.processing = True  # Lock processing button

        with st.spinner("Processing..."):
            caption = st.empty()

            logger.info("🌀 PROCESSING SPINNER STARTED")

            # 1) Wipe DB before uploading new data
            logger.info("🗑️  STEP 1: DATABASE CLEANUP INITIATED")
            logger.info("📍 Target: S3 bucket cleanup in allowed prefixes")
            wipe_db(caption)
            logger.info("✅ STEP 1: Database cleanup completed")

            # 2) upload inputs
            logger.info("📤 STEP 2: INPUT FILE UPLOAD TO S3 INITIATED")
            logger.info(f"🎯 Target Bucket: t-gen-stg-ssg-test-s3")
            logger.info(
                f"📁 Uploading: {sfw_filename} → s3://t-gen-stg-ssg-test-s3/s3_input/{sfw_filename}"
            )
            logger.info(
                f"📁 Uploading: {sector_filename} → s3://t-gen-stg-ssg-test-s3/s3_input/{sector_filename}"
            )
            async_write_input_to_s3(
                caption, sfw_filename, sfw_df, sector_filename, sector_df
            )
            logger.info("✅ STEP 2: Input file upload completed")

            # 3) core processing (may exit early)
            logger.info("🤖 STEP 3: AI CORE PROCESSING INITIATED")
            logger.info(
                f"🎯 Processing Sector: {selected_sector} ({selected_sector_alias})"
            )
            logger.info(
                "📍 This will involve LLM pipeline, data transformation, and intermediate file creation"
            )
            results = handle_core_processing(
                caption, selected_sector, selected_sector_alias
            )

            # 4) handle early exit
            if not results:
                logger.error("❌ STEP 3: Core processing FAILED - No results returned")
                logger.info(
                    "🔓 UNLOCKING PROCESSING STATE - Setting st.session_state.processing = False"
                )
                st.session_state.processing = False  # Unlock the button again
                logger.info("🚪 Calling handle_exit() for error state")
                handle_exit()
                return
            else:
                logger.info("✅ STEP 3: Core processing completed successfully")
                logger.info(f"📊 Results type: {type(results)}")
                if hasattr(results, "__len__"):
                    logger.info(f"📊 Results length: {len(results)}")

            # 5) upload outputs
            logger.info("📤 STEP 4: OUTPUT FILE UPLOAD TO S3 INITIATED")
            logger.info("🎯 Target: s3://t-gen-stg-ssg-test-s3/s3_output/")
            logger.info("📁 Creating timestamped result files")
            async_write_output_to_s3(caption, results)
            logger.info("✅ STEP 4: Output file upload completed")

            # 6) update state and rerun
            logger.info("🔄 STEP 5: SESSION STATE UPDATE INITIATED")
            logger.info("📝 Setting st.session_state.results")
            st.session_state.results = results
            logger.info(
                "📝 Setting st.session_state.csv_yes = True (enables downloads)"
            )
            st.session_state.csv_yes = True
            logger.info("📝 Setting st.session_state.app_stage = 'results_ready'")
            st.session_state.app_stage = "results_ready"
            logger.info(
                "🔓 UNLOCKING PROCESSING STATE - Setting st.session_state.processing = False"
            )
            st.session_state.processing = False  # Unlock the button again
            logger.info("✅ STEP 5: Session state update completed")

            logger.info("🌀 PROCESSING SPINNER ENDED")

        logger.info("🔄 TRIGGERING STREAMLIT RERUN")
        logger.info("=" * 80)
        logger.info("🎉 UPLOAD PROCESS COMPLETED SUCCESSFULLY")
        logger.info("=" * 80)
        st.rerun()
